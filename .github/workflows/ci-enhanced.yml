name: Enhanced CI with Coverage

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

env:
  PYTHONPATH: src
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Python Backend Tests with Coverage
  backend-test:
    name: Backend Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('config/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r config/requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock coverage[toml]
    
    - name: Run comprehensive tests with coverage
      env:
        PYTHONPATH: src
        MADSPARK_MODE: mock
        GOOGLE_API_KEY: test_key_for_ci
      run: |
        # Run the comprehensive test suite
        python -m pytest tests/ -v --cov=src/madspark --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: backend
        name: backend-coverage-${{ matrix.python-version }}
        fail_ci_if_error: false

  # Frontend Tests with Coverage
  frontend-test:
    name: Frontend Tests (React/TypeScript)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: web/frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: web/frontend
      run: |
        npm ci
    
    - name: Run frontend tests with coverage
      working-directory: web/frontend
      run: |
        npm test -- --coverage --watchAll=false --passWithNoTests
    
    - name: Build frontend
      working-directory: web/frontend
      run: |
        npm run build
    
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./web/frontend/coverage
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  # Code Quality Checks
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy bandit[toml] black isort
    
    - name: Run ruff linting
      run: |
        ruff check src/ --format=github
      continue-on-error: true
    
    - name: Run black formatting check
      run: |
        black --check src/
      continue-on-error: true
    
    - name: Run isort import sorting check
      run: |
        isort --check-only src/
      continue-on-error: true
    
    - name: Run mypy type checking
      run: |
        mypy src/ --ignore-missing-imports
      continue-on-error: true
    
    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  # API Documentation Check
  api-docs:
    name: API Documentation Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r config/requirements.txt
        pip install fastapi uvicorn httpx
    
    - name: Test OpenAPI documentation
      working-directory: web/backend
      run: |
        # Set PYTHONPATH for imports
        export PYTHONPATH=../../src:$PYTHONPATH
        
        # Start the server in background
        python main.py &
        SERVER_PID=$!
        
        # Wait for server to start with retries
        echo "Waiting for server to start..."
        for i in {1..30}; do
          if curl -s http://localhost:8000/health > /dev/null; then
            echo "Server is ready!"
            break
          fi
          echo "Attempt $i: Server not ready yet..."
          sleep 2
        done
        
        # Test OpenAPI endpoints
        python test_openapi.py
        
        # Kill the server
        kill $SERVER_PID || true

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r config/requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Install frontend dependencies
      working-directory: web/frontend
      run: npm ci
    
    - name: Run integration tests
      env:
        PYTHONPATH: src
      run: |
        # Run backend in background
        cd web/backend && python main.py &
        BACKEND_PID=$!
        
        # Wait for backend to start
        sleep 10
        
        # Run integration tests
        cd ../..
        python -m pytest tests/test_integration.py -v
        
        # Cleanup
        kill $BACKEND_PID || true

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Test backend Docker build
      working-directory: web/backend
      run: |
        docker build -t madspark-backend:test .
    
    - name: Test frontend Docker build
      working-directory: web/frontend
      run: |
        docker build -t madspark-frontend:test .
    
    - name: Test docker-compose
      working-directory: web
      run: |
        docker compose config
        docker compose build

  # Summary Report
  coverage-report:
    name: Coverage Summary
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: always()
    
    steps:
    - name: Coverage Status
      run: |
        echo "## Coverage Report Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Backend coverage data uploaded to Codecov" >> $GITHUB_STEP_SUMMARY
        echo "✅ Frontend coverage data uploaded to Codecov" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "View detailed coverage reports at: https://codecov.io/gh/${{ github.repository }}" >> $GITHUB_STEP_SUMMARY