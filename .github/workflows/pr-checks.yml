name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # Check PR size and complexity
  pr-size:
    name: PR Size Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check PR size
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          const { additions, deletions, changed_files } = pr;
          
          console.log(`PR Stats: +${additions} -${deletions} in ${changed_files} files`);
          
          let comment = '## PR Size Analysis\n\n';
          comment += `- **Files changed**: ${changed_files}\n`;
          comment += `- **Lines added**: ${additions}\n`;
          comment += `- **Lines deleted**: ${deletions}\n`;
          comment += `- **Total changes**: ${additions + deletions}\n\n`;
          
          // Size classification
          const totalChanges = additions + deletions;
          
          // Check if this is primarily a test PR
          const files = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: pr.number
          });
          
          const testFiles = files.data.filter(f => f.filename.includes('test'));
          const testChanges = testFiles.reduce((acc, f) => acc + f.additions + f.deletions, 0);
          const isTestPR = testChanges > totalChanges * 0.8; // 80% or more changes are in test files
          
          let sizeLabel = '';
          
          if (totalChanges < 50) {
            sizeLabel = 'size/XS';
            comment += '✅ **Size**: XS (< 50 lines) - Great job keeping it small!\n';
          } else if (totalChanges < 200) {
            sizeLabel = 'size/S';
            comment += '✅ **Size**: S (50-200 lines) - Good size for review\n';
          } else if (totalChanges < 500) {
            sizeLabel = 'size/M';
            comment += '⚠️ **Size**: M (200-500 lines) - Consider breaking into smaller PRs\n';
          } else if (totalChanges < 1000) {
            sizeLabel = 'size/L';
            comment += '⚠️ **Size**: L (500-1000 lines) - Large PR, difficult to review\n';
          } else if (isTestPR && totalChanges < 5000) {
            sizeLabel = 'size/XL-tests';
            comment += '✅ **Size**: XL (> 1000 lines) - Large test PR, acceptable for comprehensive test coverage\n';
          } else {
            sizeLabel = 'size/XL';
            comment += '❌ **Size**: XL (> 1000 lines) - Please break into smaller PRs\n';
          }
          
          // Add size label
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.number,
            labels: [sizeLabel]
          });
          
          // Post comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.number,
            body: comment
          });

  # Automated tests summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [pr-size]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate test report
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          
          let comment = '## Automated Checks Summary\n\n';
          comment += '### Required Checks\n\n';
          comment += '- [ ] All tests passing\n';
          comment += '- [ ] Code coverage >= 80%\n';
          comment += '- [ ] No security vulnerabilities\n';
          comment += '- [ ] TypeScript build successful\n';
          comment += '- [ ] API documentation updated\n\n';
          
          comment += '### Code Quality\n\n';
          comment += '- [ ] Linting passed (ruff)\n';
          comment += '- [ ] Type checking passed (mypy)\n';
          comment += '- [ ] Frontend build successful\n\n';
          
          comment += '### Review Checklist\n\n';
          comment += '- [ ] Code follows project conventions\n';
          comment += '- [ ] Tests added/updated for changes\n';
          comment += '- [ ] Documentation updated if needed\n';
          comment += '- [ ] No hardcoded secrets or credentials\n';
          comment += '- [ ] Error handling is appropriate\n';
          
          // Find and update or create comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.number
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Automated Checks Summary')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: comment
            });
          }

  # Check for common issues
  common-issues:
    name: Common Issues Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for common issues
      run: |
        echo "Checking for common issues..."
        
        # Check for console.log statements
        if grep -r "console\.log" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" web/frontend/src; then
          echo "::warning::Found console.log statements. Consider removing for production."
        fi
        
        # Check for TODO comments
        if grep -r "TODO\|FIXME\|XXX" --include="*.py" --include="*.ts" --include="*.tsx" src/ web/; then
          echo "::warning::Found TODO/FIXME comments. Consider addressing them."
        fi
        
        # Check for large files
        large_files=$(find . -type f -size +1M | grep -v node_modules | grep -v .git)
        if [ ! -z "$large_files" ]; then
          echo "::warning::Found large files (>1MB): $large_files"
        fi
        
        # Check for API keys or secrets (excluding node_modules, test files, and legitimate config references)
        # Note: This check looks for hardcoded secrets, not environment variable usage
        secrets_found=$(grep -r -E "(api_key|apikey|api-key|secret|password|token)" --include="*.py" --include="*.ts" --include="*.tsx" src/ web/backend/ web/frontend/src/ 2>/dev/null | grep -v -E "(test|mock|example|sample|node_modules|os\.environ\.get|process\.env|your-api-key-here|tests/|test_|\.test\.|_test\.|getenv|environ\[|GOOGLE_API_KEY|SECRET_KEY|JWT_SECRET|\.github|workflow)" | grep -v -E "google_api_key.*os\.environ|api_key.*environ|Environment variable|test safe|test:|# test" || true)
        
        if [ ! -z "$secrets_found" ]; then
          echo "::error::Potential secrets found. Please review:"
          echo "$secrets_found"
          exit 1
        fi