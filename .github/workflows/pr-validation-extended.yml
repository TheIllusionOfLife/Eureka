name: PR Validation Extended

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  mock-mode-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r config/requirements.txt
          pip install -r config/requirements-dev.txt
          
      - name: Test in Mock Mode
        env:
          MADSPARK_MODE: mock
          PYTHONPATH: src
        run: |
          echo "Testing CLI in mock mode..."
          python -m madspark.cli.cli "test topic" "test context" || exit 1
          
          echo "Running core tests in mock mode..."
          pytest tests/test_agents.py tests/test_coordinators.py -v
          
  deprecated-syntax-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for Deprecated Syntax
        run: |
          echo "Checking for deprecated docker-compose syntax..."
          python tests/test_docker_compose_syntax.py
          
          # Check for other deprecated patterns
          echo "Checking for other deprecated patterns..."
          
          # Add more deprecated pattern checks here as needed
          
  test-contract-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Validate Test-API Contract
        run: |
          echo "Validating that tests match API contracts..."
          
          # This would run a script to verify test expectations match API responses
          # For now, we'll create a placeholder
          echo "TODO: Implement contract validation"
          
  security-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install security tools
        run: pip install bandit safety
          
      - name: Run Security Checks
        run: |
          echo "Running Bandit security scan..."
          bandit -r src/ -f json -o bandit-report.json || true
          
          echo "Checking for known vulnerabilities..."
          safety check --json || true
          
          # Parse results and comment on PR if issues found
          python -c "
          import json
          import os
          
          issues = []
          
          # Check bandit results
          try:
              with open('bandit-report.json', 'r') as f:
                  bandit_data = json.load(f)
                  if bandit_data.get('results'):
                      issues.append(f\"ðŸ”’ Bandit found {len(bandit_data['results'])} security issues\")
          except:
              pass
              
          if issues:
              print('SECURITY_ISSUES=' + ';'.join(issues))
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f\"has_issues=true\\n\")
          "
          
      - name: Comment Security Results
        if: steps.security.outputs.has_issues == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ðŸ”’ Security Check Results
            
            Security scan found potential issues. Please review the workflow logs for details.
            
            **Note**: Some findings may be false positives. Review each issue carefully.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });