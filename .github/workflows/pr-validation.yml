name: PR Validation
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-size-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check PR Size
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const fileCount = files.length;
            const additions = pr.additions;
            const deletions = pr.deletions;
            const totalChanges = additions + deletions;
            
            console.log(`PR #${pr.number} Statistics:`);
            console.log(`- Files changed: ${fileCount}`);
            console.log(`- Lines added: ${additions}`);
            console.log(`- Lines deleted: ${deletions}`);
            console.log(`- Total changes: ${totalChanges}`);
            
            // Define thresholds
            const maxFiles = 20;
            const maxChanges = 500;
            
            let failed = false;
            let warnings = [];
            
            if (fileCount > maxFiles) {
              failed = true;
              core.error(`PR has ${fileCount} files changed (max: ${maxFiles}). Please split into smaller PRs.`);
            }
            
            if (totalChanges > maxChanges) {
              failed = true;
              core.error(`PR has ${totalChanges} total line changes (max: ${maxChanges}). Please split into smaller PRs.`);
            }
            
            // Add warning for large but not failing PRs
            if (fileCount > 15) {
              warnings.push(`‚ö†Ô∏è PR has ${fileCount} files - consider splitting for easier review`);
            }
            
            // Comment on PR with size analysis
            const comment = `## üìä PR Size Analysis
            
            | Metric | Value | Status |
            |--------|-------|--------|
            | Files changed | ${fileCount} | ${fileCount <= maxFiles ? '‚úÖ' : '‚ùå'} |
            | Lines added | ${additions} | - |
            | Lines deleted | ${deletions} | - |
            | Total changes | ${totalChanges} | ${totalChanges <= maxChanges ? '‚úÖ' : '‚ùå'} |
            
            ${warnings.length > 0 ? '### ‚ö†Ô∏è Warnings\n' + warnings.join('\n') : ''}
            
            ${failed ? '### ‚ùå PR Too Large\nThis PR exceeds our size limits. Please split it into smaller, focused PRs for better review quality.' : '### ‚úÖ PR Size OK'}
            
            <details>
            <summary>Size Guidelines</summary>
            
            - **Max files**: ${maxFiles}
            - **Max total changes**: ${maxChanges} lines
            - **Recommended**: < 15 files, < 300 lines
            
            Large PRs are harder to review and more likely to introduce bugs.
            </details>`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: comment
            });
            
            if (failed) {
              core.setFailed('PR exceeds size limits');
            }

  mock-mode-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r config/requirements.txt
          pip install -r config/requirements-dev.txt
          
      - name: Test in Mock Mode
        env:
          MADSPARK_MODE: mock
          PYTHONPATH: src
        run: |
          echo "Testing CLI in mock mode..."
          python -m madspark.cli.cli "test topic" "test context" || exit 1
          
          echo "Running core tests in mock mode..."
          pytest tests/test_agents.py tests/test_coordinator.py -v
          
  deprecated-syntax-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for Deprecated Syntax
        run: |
          echo "Checking for deprecated docker-compose syntax..."
          
          # Check for old docker-compose syntax
          if grep -r "docker-compose" --include="*.md" --include="*.yml" --include="*.yaml" --include="*.sh" --include="*.py" . | grep -v "docker-compose.yml"; then
            echo "‚ùå Found deprecated 'docker-compose' syntax. Use 'docker compose' instead."
            exit 1
          else
            echo "‚úÖ No deprecated docker-compose syntax found"
          fi
          
          # Check for other deprecated patterns
          echo "Checking for other deprecated patterns..."
          
          # Add more deprecated pattern checks here as needed
          
  test-contract-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Validate Test-API Contract
        run: |
          echo "Validating that tests match API contracts..."
          
          # This would run a script to verify test expectations match API responses
          # For now, we'll create a placeholder
          echo "TODO: Implement contract validation"
          
  security-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Security Checks
        run: |
          pip install bandit safety
          
          echo "Running Bandit security scan..."
          bandit -r src/ -f json -o bandit-report.json || true
          
          echo "Checking for known vulnerabilities..."
          safety check --json || true