#!/usr/bin/env python3
"""
mad_spark config - Configuration tool for MadSpark Multi-Agent System
"""
import os
import sys
from pathlib import Path
import getpass

# Color codes
RED = '\033[0;31m'
GREEN = '\033[0;32m'
YELLOW = '\033[0;33m'
BLUE = '\033[0;34m'
PURPLE = '\033[0;35m'
NC = '\033[0m'  # No Color

def get_project_root():
    """Find project root by looking for setup.sh"""
    current = Path(__file__).resolve()
    while current != current.parent:
        if (current / "setup.sh").exists():
            return current
        current = current.parent
    return None

def read_env_file(env_path):
    """Read current .env configuration"""
    config = {}
    if env_path.exists():
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    config[key.strip()] = value.strip().strip('"')
    return config

def write_env_file(env_path, config):
    """Write configuration to .env file"""
    lines = []
    lines.append("# Google API Configuration")
    lines.append(f'GOOGLE_API_KEY="{config.get("GOOGLE_API_KEY", "YOUR_API_KEY_HERE")}"')
    lines.append(f'GOOGLE_GENAI_MODEL="{config.get("GOOGLE_GENAI_MODEL", "gemini-2.5-flash")}"')
    
    # Add MADSPARK_MODE if in mock mode
    if config.get("MADSPARK_MODE") == "mock":
        lines.append("# Running in mock mode - no API key configured")
        lines.append('MADSPARK_MODE="mock"')
    
    with open(env_path, 'w') as f:
        f.write('\n'.join(lines) + '\n')

def validate_api_key(key):
    """Validate API key format"""
    return key.startswith("AIza") and len(key) > 30

def main():
    print(f"{PURPLE}üîß MadSpark Configuration{NC}")
    print()
    
    # Find project root
    project_root = get_project_root()
    if not project_root:
        print(f"{RED}‚ùå Could not find MadSpark project root{NC}")
        sys.exit(1)
    
    env_path = project_root / "src" / "madspark" / ".env"
    
    # Read current configuration
    config = read_env_file(env_path)
    current_key = config.get("GOOGLE_API_KEY", "YOUR_API_KEY_HERE")
    current_mode = config.get("MADSPARK_MODE", "")
    
    # Show current status
    if validate_api_key(current_key):
        print(f"{GREEN}‚úÖ API key configured{NC}")
        if current_mode == "mock":
            print(f"{YELLOW}‚ö†Ô∏è  But MADSPARK_MODE is set to 'mock'{NC}")
        print()
    else:
        print(f"{YELLOW}‚ö†Ô∏è  No valid API key configured{NC}")
        print(f"{BLUE}üìç Currently running in mock mode{NC}")
        print()
    
    # Show menu
    print(f"{BLUE}What would you like to do?{NC}")
    print("  1) Configure API key for real AI responses")
    print("  2) Switch to mock mode (no API required)")
    print("  3) Show current configuration")
    print("  4) Exit")
    print()
    
    choice = input("Choose option (1-4): ").strip()
    
    if choice == "1":
        # Configure API key
        print()
        print(f"{YELLOW}üìù API Key Setup{NC}")
        print("Get your key from: https://makersuite.google.com/app/apikey")
        print()
        
        # Use getpass for secure input
        api_key = getpass.getpass("Enter your Google API key: ").strip()
        
        if validate_api_key(api_key):
            config["GOOGLE_API_KEY"] = api_key
            # Remove mock mode if set
            if "MADSPARK_MODE" in config:
                del config["MADSPARK_MODE"]
            
            write_env_file(env_path, config)
            print()
            print(f"{GREEN}‚úÖ API key configured successfully!{NC}")
            print()
            print("Test it with:")
            print(f"  {BLUE}mad_spark 'consciousness' 'what is it?'{NC}")
        else:
            print()
            print(f"{RED}‚ùå Invalid API key format{NC}")
            print("API keys should start with 'AIza' and be at least 30 characters")
            print()
            print(f"{YELLOW}üí° Tip: Make sure you copied the entire key{NC}")
    
    elif choice == "2":
        # Switch to mock mode
        config["MADSPARK_MODE"] = "mock"
        write_env_file(env_path, config)
        print()
        print(f"{GREEN}‚úÖ Switched to mock mode{NC}")
        print("You can now use MadSpark without an API key")
    
    elif choice == "3":
        # Show configuration
        print()
        print(f"{PURPLE}Current Configuration:{NC}")
        print(f"  API Key: {'‚úÖ Configured' if validate_api_key(current_key) else '‚ùå Not configured'}")
        print(f"  Mode: {'Mock' if current_mode == 'mock' or not validate_api_key(current_key) else 'API'}")
        print(f"  Model: {config.get('GOOGLE_GENAI_MODEL', 'gemini-2.5-flash')}")
    
    elif choice == "4" or choice == "":
        print("Exiting...")
        sys.exit(0)
    
    else:
        print(f"{RED}Invalid choice{NC}")
        sys.exit(1)

if __name__ == "__main__":
    main()